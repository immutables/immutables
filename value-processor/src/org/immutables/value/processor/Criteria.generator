[--
   Copyright 2014-2018 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for type in values.values if type.generateCriteria]
    [if type.kind.isValue andnot type.generics]
[output.java type.package (type.name 'Criteria') type.element]
[type.sourceHeader]
[generateCriteria type]
[/output.java]
[output.java type.package (type.name 'CriteriaTemplate') type.element]
[type.sourceHeader]
[generateTemplate type]
[/output.java]
    [else]
[output.error]
Use @Criteria to annotate @Value.Immutable abstract value types with no type variables
[/output.error]
    [/if]
  [/for]
[/template]

[template generateTemplate Type type]
[if type.package]
package [type.package];
[/if]

import org.immutables.criteria.Criterion;
import org.immutables.criteria.matcher.CriteriaContext;
import org.immutables.criteria.matcher.CriteriaCreator;
import org.immutables.criteria.matcher.IterableMatcher;
import org.immutables.criteria.matcher.AndMatcher;
import org.immutables.criteria.matcher.OrMatcher;
import org.immutables.criteria.matcher.Matchers;
import org.immutables.criteria.matcher.OptionalMatcher;
import org.immutables.criteria.matcher.ObjectMatcher;
import org.immutables.criteria.matcher.StringMatcher;
import org.immutables.criteria.matcher.BooleanMatcher;
import org.immutables.criteria.matcher.NotMatcher;
import org.immutables.criteria.matcher.WithMatcher;
import org.immutables.criteria.matcher.ComparableMatcher;
import org.immutables.criteria.expression.Expression;
import org.immutables.criteria.expression.ExpressionVisitor;
import org.immutables.criteria.expression.Expressions;
import org.immutables.criteria.expression.Constant;
import org.immutables.criteria.expression.Operators;
import org.immutables.criteria.expression.Operator;
import org.immutables.criteria.expression.Path;
import org.immutables.criteria.expression.Call;

import java.util.Objects;

[for a in type.allMarshalingAttributes]
[if a.hasCriteria]
import [a.unwrappedElementType]Criteria;
[/if]
[/for]

[for starImport in type.requiredSourceStarImports]
import [starImport];
[/for]

/**
 * A {@code [type.name]Criteria} provides type-safe API for retrieving documents
 * from a generic data-source.
 * <p>This class is immutable and thus thread-safe.</p>
 */
[if type allowsClasspathAnnotation 'javax.annotation.concurrent.ThreadSafe']
@javax.annotation.concurrent.ThreadSafe
[/if]
@javax.annotation.concurrent.Immutable
[atGenerated type]
[type.typeDocument.access]class [type.name]CriteriaTemplate<R> implements Criterion<[type.typeDocument]>,
            AndMatcher<[type.name]Criteria>, OrMatcher<[type.name]Criteria>,
            NotMatcher<R, [type.name]Criteria>,
            WithMatcher<R, [type.name]Criteria> {

   private final CriteriaContext context;

   [for a in type.allMarshalingAttributes]
   public final [a.criteria.matcher.matcherType] [a.name];
   [/for]

   @SuppressWarnings("unchecked")
   [type.name]CriteriaTemplate(CriteriaContext context) {
     this.context = Objects.requireNonNull(context, "context");
   [for a in type.allMarshalingAttributes]
     this.[a.name] = ([a.criteria.matcher.matcherType]) [a.criteria.matcher.creator];
   [/for]
   }
}
[/template]

[template generateCriteria Type type]
[if type.package]
package [type.package];
[/if]

import org.immutables.criteria.Criterion;
import org.immutables.criteria.matcher.ContextHolder;
import org.immutables.criteria.matcher.CriteriaContext;
import org.immutables.criteria.matcher.CriteriaCreator;
import org.immutables.criteria.matcher.Disjunction;
import org.immutables.criteria.expression.Query;
import org.immutables.criteria.expression.Queryable;

[for a in type.allMarshalingAttributes]
[if a.hasCriteria]
import [a.unwrappedElementType]Criteria;
[/if]
[/for]

[for starImport in type.requiredSourceStarImports]
import [starImport];
[/for]
/**
 * A {@code [type.name]Criteria} provides type-safe API for retrieving documents
 * from a generic data-source.
 * <p>This class is immutable and thus thread-safe.</p>
 */
[if type allowsClasspathAnnotation 'javax.annotation.concurrent.ThreadSafe']
@javax.annotation.concurrent.ThreadSafe
[/if]
@javax.annotation.concurrent.Immutable
[atGenerated type]
[type.typeDocument.access]class [type.name]Criteria extends [type.name]CriteriaTemplate<[type.name]Criteria>
     implements Disjunction<[type.name]CriteriaTemplate<[type.name]Criteria>>  {

  /** Default criteria instance */
  public static final [type.name]Criteria [toLower type.name] = create();

  /** Factory method to create an instance of [type.name]Criteria */
  private static [type.name]Criteria create() {
    return new Private();
  }

  /** Used to instantiate [type.name]Criteria by other criterias */
  public static [type.name]Criteria create(CriteriaContext context) {
     return new Private(context);
  }

  private [type.name]Criteria(CriteriaContext context) {
     super(context);
  }

  /** Private implementation which exposes {@link Queryable} interface. It is used to hide internal API (interfaces) */
  private static final class Private extends [type.name]Criteria implements Queryable, ContextHolder {
    private final CriteriaContext context;

    private Private() {
      this(new CriteriaContext([type.typeDocument].class, creator()).withCreators(creator(), creator()));
    }

    private Private(CriteriaContext context) {
      super(context);
      this.context = context;
    }

    private static CriteriaCreator<[type.name]Criteria> creator() {
      return (CriteriaContext ctx) ->  new Private(ctx);
    }

    @Override
    public Query query() {
      return context().query();
    }

    @Override
    public CriteriaContext context() {
      return this.context;
    }
  }

}
[/template]

[template atGenerated Type type]
[if type allowsClasspathAnnotation 'org.immutables.value.Generated']
@org.immutables.value.Generated(from = "[type.typeAbstract.relativeRaw]", generator = "Criteria")
[/if]
[/template]

