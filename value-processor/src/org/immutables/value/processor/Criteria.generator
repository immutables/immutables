[--
   Copyright 2014-2018 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for type in values.values if type.generateCriteria]
    [if type.kind.isValue andnot type.generics]
[output.java type.package (type.name 'Criteria') type.element]
[type.sourceHeader]
[generateCriteria type]
[/output.java]
    [else]
[output.error]
Use @Criteria to annotate @Value.Immutable abstract value types with no type variables
Use @Criteria to annotate @Value.Immutable abstract value types with no type variables
[/output.error]
    [/if]
  [/for]
[/template]

[template generateCriteria Type type]
[if type.package]
package [type.package];
[/if]

import org.immutables.criteria.Criterion;
import org.immutables.criteria.matcher.CriteriaContext;
import org.immutables.criteria.matcher.CriteriaCreator;
import org.immutables.criteria.matcher.CollectionMatcher;
import org.immutables.criteria.matcher.Disjunction;
import org.immutables.criteria.matcher.AndMatcher;
import org.immutables.criteria.matcher.OrMatcher;
import org.immutables.criteria.matcher.Matchers;
import org.immutables.criteria.matcher.OptionalMatcher;
import org.immutables.criteria.matcher.ObjectMatcher;
import org.immutables.criteria.matcher.StringMatcher;
import org.immutables.criteria.matcher.BooleanMatcher;
import org.immutables.criteria.matcher.NotMatcher;
import org.immutables.criteria.matcher.ComparableMatcher;
import org.immutables.criteria.expression.Expression;
import org.immutables.criteria.expression.Query;
import org.immutables.criteria.expression.Queryable;
import org.immutables.criteria.expression.ExpressionVisitor;
import org.immutables.criteria.expression.Expressions;
import org.immutables.criteria.expression.Constant;
import org.immutables.criteria.expression.Operators;
import org.immutables.criteria.expression.Operator;
import org.immutables.criteria.expression.Path;
import org.immutables.criteria.expression.Call;

import java.util.Objects;

[for a in type.allMarshalingAttributes]
[if a.hasCriteria]
import [a.unwrappedElementType]Criteria;
[/if]
[/for]

[for starImport in type.requiredSourceStarImports]
import [starImport];
[/for]

/**
 * A {@code [type.name]Criteria} provides type-safe API for retrieving documents
 * from a generic data-source.
 * <p>This class is immutable and thus thread-safe.</p>
 */
[if type allowsClasspathAnnotation 'javax.annotation.concurrent.ThreadSafe']
@javax.annotation.concurrent.ThreadSafe
[/if]
@javax.annotation.concurrent.Immutable
[atGenerated type]
[type.typeDocument.access] class [type.name]Criteria<R> implements Criterion<[type.name]>,
            AndMatcher<[type.name]Criteria<R>>, OrMatcher<[type.name]Criteria<R>>, NotMatcher<R, [type.name]Criteria.Self> {

   /** Default criteria instance */
   public static final [type.name]Criteria<Self> [toLower type.name] = create();

   private final CriteriaContext context;

   [for a in type.allMarshalingAttributes]
   public final [criteriaType a type] [a.name];
   [/for]


   /** TODO this should be top-level class */
   public static class Self extends [type.name]Criteria<Self> implements Disjunction<[type.name]Criteria<Self>> {

    private final CriteriaContext context;

    private Self(CriteriaContext context) {
      super(context);
      this.context = context;
    }

    @Override
    public [type.name]Criteria<Self> or() {
      return context.or().<Self>factory1().create1();
    }

   }

   /** Similar to {@link Self} but exposes {@link Expressional} interface */
   private final static class ExpressionalSelf extends Self implements Queryable {
      private final CriteriaContext context;

      private ExpressionalSelf() {
         this(new CriteriaContext([type.name].class, creator()).withCreators(creator(), creator(), creator()));
      }

      private ExpressionalSelf(CriteriaContext context) {
       super(context);
       this.context = context;
      }

      private static CriteriaCreator<Self> creator() {
        return (CriteriaContext ctx) ->  new ExpressionalSelf(ctx);
      }

      @Override
      public Query query() {
        return this.context.query();
      }
   }

   @SuppressWarnings("unchecked")
   public [type.name]Criteria(CriteriaContext context) {
     this.context = Objects.requireNonNull(context, "context");
   [for a in type.allMarshalingAttributes]
     this.[a.name] = ([criteriaType a type]) [createMatcher a type];
   [/for]
   }

   /** Factory method to create an instance of [type.name]Criteria */
   private static [type.name]Criteria<Self> create() {
     return new ExpressionalSelf();
   }

}
[/template]

[template criteriaType Attribute a Type type][output.trim]
[if (a.boolean or (a.type eq 'java.lang.Boolean'))]
BooleanMatcher<R>
[else if a.stringType]
StringMatcher<R>
[else if a.optionalType]
  [if a.hasSimpleScalarElementType or a.isMaybeComparableKey]
    OptionalMatcher<R, [scalarElementCriteria a 'R'], [scalarElementCriteria a 'Self']>
  [else if a.hasCriteria]
    OptionalMatcher<R, [a.unwrappedElementType]Criteria<R>, [a.unwrappedElementType]Criteria.Self>
  [else]
    OptionalMatcher<R, [scalarElementCriteria a 'R'], [scalarElementCriteria a 'Self']>
  [/if]
[else if a.comparable]
  ComparableMatcher<R, [a.wrappedElementType]>
[else if a.collectionType]
  [if a.hasCriteria]
      CollectionMatcher<R, [a.unwrappedElementType]Criteria<R>, [a.unwrappedElementType]Criteria.Self, [a.wrappedElementType]>
  [else]
      CollectionMatcher<R, [scalarElementCriteria a 'R'], [scalarElementCriteria a 'Self'], [a.wrappedElementType]>
  [/if]
[else if a.hasCriteria]
  [a.unwrappedElementType]Criteria<R>
[else]
  ObjectMatcher<R, [a.wrappedElementType]>
[/if]
[/output.trim][/template]

[template createMatcher Attribute a Type type][output.trim]
[if (a.boolean or (a.type eq 'java.lang.Boolean'))]
Matchers.create(BooleanMatcher.class, [constructorArgs a type])
[else if a.stringType]
Matchers.create(StringMatcher.class, [constructorArgs a type])
[else if a.optionalType]
   Matchers.create(OptionalMatcher.class, [constructorArgs a type])
[else if a.comparable]
   Matchers.create(ComparableMatcher.class, [constructorArgs a type])
[else if a.collectionType]
   Matchers.create(CollectionMatcher.class, [constructorArgs a type])
[else if a.hasCriteria]
  new [a.unwrappedElementType]Criteria<R>([constructorArgs a type])
[else]
   Matchers.create(ObjectMatcher.class, [constructorArgs a type])
[/if]
[/output.trim][/template]

[template constructorArgs Attribute a Type type][output.trim]
[if a.hasCriteria]
  context.withPath([type.name].class, "[a.name]")
           .withCreators(ctx -> new [type.name]Criteria.ExpressionalSelf(ctx),
                         ctx -> new [a.unwrappedElementType]Criteria<R>(ctx),
                         ctx -> ([a.unwrappedElementType]Criteria.Self) [a.unwrappedElementType]Criteria.[toLower a.unwrappedElementTypeNameSimple])

[else if a.hasSimpleScalarElementType or a.isMaybeComparableKey]
  context.withPath([type.name].class, "[a.name]")
           .withCreators(ctx -> new [type.name]Criteria.ExpressionalSelf(ctx),
                           ctx -> Matchers.create([scalarMatcherType a].class, ctx),
                          ctx -> Matchers.create([scalarMatcherType a].Self.class, ctx))
[else]
  context.withPath([type.name].class, "[a.name]").withCreators(ctx -> new [type.name]Criteria.ExpressionalSelf(ctx))
[/if]
[/output.trim][/template]

[-- Used to create criteria for T (eg. List<T>) when T is a scalar / comparable--]
[template scalarElementCriteria Attribute a String elementName][output.trim]
[if a.unwrappedElementType eq 'boolean']
  [if elementName eq 'Self']BooleanMatcher.Self[else]BooleanMatcher<[elementName]>[/if]
[else if a.unwrappedElementType eq 'java.lang.String']
  [if elementName eq 'Self']StringMatcher.Self[else]StringMatcher<[elementName]>[/if]
[else if a.isMaybeComparableKey]
  [if elementName eq 'Self']ComparableMatcher.Self<[a.wrappedElementType]>[else]ComparableMatcher<[elementName], [a.wrappedElementType]>[/if]
[else]
  [if elementName eq 'Self']ObjectMatcher.Self<[a.wrappedElementType]>[else]ObjectMatcher<[elementName], [a.wrappedElementType]>[/if]
[/if]
[/output.trim][/template]

[template scalarMatcherType Attribute a][output.trim]
[if a.unwrappedElementType eq 'boolean']
  BooleanMatcher
[else if a.unwrappedElementType eq 'java.lang.String']
  StringMatcher
[else if a.isMaybeComparableKey]
  ComparableMatcher
[else]
  ObjectMatcher
[/if]
[/output.trim][/template]

[template atGenerated Type type]
[if type allowsClasspathAnnotation 'org.immutables.value.Generated']
@org.immutables.value.Generated(from = "[type.typeAbstract.relativeRaw]", generator = "Criteria")
[/if]
[/template]
