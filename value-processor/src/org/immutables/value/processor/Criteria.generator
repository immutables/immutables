[--
   Copyright 2014-2018 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for type in values.values if type.generateCriteria]
    [if type.kind.isValue andnot type.generics]
[output.java type.package (type.name 'Criteria') type.element]
[type.sourceHeader]
[generateCriteria type]
[/output.java]
    [else]
[output.error]
Use @Criteria to annotate @Value.Immutable abstract value types with no type variables
Use @Criteria to annotate @Value.Immutable abstract value types with no type variables
[/output.error]
    [/if]
  [/for]
[/template]

[template generateCriteria Type type]
[if type.package]
package [type.package];
[/if]

import org.immutables.criteria.Criterion;
import org.immutables.criteria.matcher.HasContext;
import org.immutables.criteria.matcher.CriteriaContext;
import org.immutables.criteria.matcher.CriteriaCreator;
import org.immutables.criteria.matcher.IterableMatcher;
import org.immutables.criteria.matcher.Disjunction;
import org.immutables.criteria.matcher.AndMatcher;
import org.immutables.criteria.matcher.OrMatcher;
import org.immutables.criteria.matcher.Matchers;
import org.immutables.criteria.matcher.OptionalMatcher;
import org.immutables.criteria.matcher.ObjectMatcher;
import org.immutables.criteria.matcher.StringMatcher;
import org.immutables.criteria.matcher.BooleanMatcher;
import org.immutables.criteria.matcher.NotMatcher;
import org.immutables.criteria.matcher.WithMatcher;
import org.immutables.criteria.matcher.ComparableMatcher;
import org.immutables.criteria.expression.Expression;
import org.immutables.criteria.expression.Query;
import org.immutables.criteria.expression.Queryable;
import org.immutables.criteria.expression.ExpressionVisitor;
import org.immutables.criteria.expression.Expressions;
import org.immutables.criteria.expression.Constant;
import org.immutables.criteria.expression.Operators;
import org.immutables.criteria.expression.Operator;
import org.immutables.criteria.expression.Path;
import org.immutables.criteria.expression.Call;

import java.util.Objects;

[for a in type.allMarshalingAttributes]
[if a.hasCriteria]
import [a.unwrappedElementType]Criteria;
[/if]
[/for]

[for starImport in type.requiredSourceStarImports]
import [starImport];
[/for]

/**
 * A {@code [type.name]Criteria} provides type-safe API for retrieving documents
 * from a generic data-source.
 * <p>This class is immutable and thus thread-safe.</p>
 */
[if type allowsClasspathAnnotation 'javax.annotation.concurrent.ThreadSafe']
@javax.annotation.concurrent.ThreadSafe
[/if]
@javax.annotation.concurrent.Immutable
[atGenerated type]
[type.typeDocument.access] class [type.name]Criteria<R> implements Criterion<[type.name]>,
            AndMatcher<[type.name]Criteria<R>>, OrMatcher<[type.name]Criteria<R>>,
            NotMatcher<R, [type.name]Criteria.Self> {

   /** Default criteria instance */
   public static final [type.name]Criteria<Self> [toLower type.name] = create();

   private final CriteriaContext context;

   [for a in type.allMarshalingAttributes]
   [if a.optionalType or (a.collectionType ornot a.hasCriteria)]
   public final [toUpper a.name]Field<R> [a.name];
   [else]
   public final [a.criteria.matcher.toTemplate] [a.name];
   [/if]
   [/for]

   /** TODO this should be top-level class */
   public static class Self extends [type.name]Criteria<Self> implements Disjunction<[type.name]Criteria<Self>> {

    private final CriteriaContext context;

    private Self(CriteriaContext context) {
      super(context);
      this.context = context;
    }

    @Override
    public [type.name]Criteria<Self> or() {
      return context.or().<Self, Object>factory().createRoot();
    }

   }

   /** Similar to {@link Self} but exposes {@link Expressional} interface */
   private final static class PrivateSelf extends Self implements Queryable, HasContext {
      private final CriteriaContext context;

      private PrivateSelf() {
         this(new CriteriaContext([type.name].class, creator()).withCreators(creator(), creator()));
      }

      private PrivateSelf(CriteriaContext context) {
       super(context);
       this.context = context;
      }

      private static CriteriaCreator<Self> creator() {
        return (CriteriaContext ctx) ->  new PrivateSelf(ctx);
      }

      @Override
      public Query query() {
        return context().query();
      }

      @Override
      public CriteriaContext context() {
         return this.context;
      }
   }

   @SuppressWarnings("unchecked")
   private [type.name]Criteria(CriteriaContext context) {
     this.context = Objects.requireNonNull(context, "context");
   [for a in type.allMarshalingAttributes]
     this.[a.name] = [createMatcher a type];
   [/for]
   }

   /** Factory method to create an instance of [type.name]Criteria */
   private static [type.name]Criteria<Self> create() {
     return new PrivateSelf();
   }

   public static [type.name]Criteria<Self> create(CriteriaContext context) {
     return new PrivateSelf(context);
   }

   [for a in type.allMarshalingAttributes]
   [if a.optionalType or (a.collectionType ornot a.hasCriteria)]

   [fieldDefinition a type]

   [fieldImplementation a type]
   [/if]
   [/for]
}
[/template]

[template fieldDefinition Attribute a Type type]
public interface [toUpper a.name]Field<R> extends [a.criteria.matcher.toTemplate], NotMatcher<R, [a.criteria.matcher.toSelf.toTemplate]>, WithMatcher<R, [a.criteria.matcher.toSelf.toTemplate]>  {}
[/template]

[template fieldImplementation Attribute a Type type]
private static class Private[toUpper a.name]Field implements [toUpper a.name]Field<[a.criteria.matcher.toSelf.toTemplate]>, HasContext {
  private final CriteriaContext context;
  private Private[toUpper a.name]Field(CriteriaContext context) {
    this.context = context;
  }

  @Override
  public CriteriaContext context() {
    return context;
  }
}
[/template]

[template createMatcher Attribute a Type type][output.trim]
[let fieldName]Private[toUpper a.name]Field[/let]
[if (a.boolean or (a.type eq 'java.lang.Boolean'))]
([toUpper a.name]Field<R>) new [fieldName]([constructorArgs a type])
[else if a.stringType or (a.optionalType or (a.comparable or a.collectionType))]
([toUpper a.name]Field<R>) new [fieldName]([constructorArgs a type])
[else if a.hasCriteria]
  ([a.unwrappedElementType]Criteria<R>) [a.unwrappedElementType]Criteria.create(context.withPath([type.name].class, "[a.name]"))
[else]
   ([toUpper a.name]Field<R>) new [fieldName]([constructorArgs a type])
[/if]
[/output.trim][/template]

[template constructorArgs Attribute a Type type][output.trim]
[if a.hasCriteria]
  context.withPath([type.name].class, "[a.name]")
           .withCreators(ctx -> [type.name]Criteria.create(ctx),
                         ctx -> [a.unwrappedElementType]Criteria.create(ctx))

[else if a.hasSimpleScalarElementType or a.isMaybeComparableKey]
  context.withPath([type.name].class, "[a.name]")
           .withCreators(ctx -> [type.name]Criteria.create(ctx),
                           ctx -> Matchers.create([a.criteria.scalarMatcher.withoutParameters.toTemplate].class, ctx))
[else]
  context
  .withPath([type.name].class, "[a.name]")
  .withCreators(ctx -> [type.name]Criteria.create(ctx), ctx -> [type.name]Criteria.create(ctx))
[/if]
[/output.trim][/template]


[template atGenerated Type type]
[if type allowsClasspathAnnotation 'org.immutables.value.Generated']
@org.immutables.value.Generated(from = "[type.typeAbstract.relativeRaw]", generator = "Criteria")
[/if]
[/template]
