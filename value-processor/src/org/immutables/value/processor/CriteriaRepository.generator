[--
   Copyright 2014-2019 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for type in values.values if type.generateRepository]
    [if type.kind.isValue andnot type.generics]
[output.java type.package (type.name 'Repository') type.element]
[type.sourceHeader]
[generateRepository type]
[/output.java]
    [else]
[output.error]
Use @Criteria.Repository to annotate @Value.Immutable abstract value types with no type variables
[/output.error]
    [/if]
  [/for]
[/template]

[-- Actual generator for Repository --]
[template generateRepository Type type]
[if type.package]
package [type.package];
[/if]

[for starImport in type.requiredSourceStarImports]
import [starImport];
[/for]

import com.google.common.collect.ImmutableList;

import org.immutables.criteria.Criterion;
import org.immutables.criteria.Criterias;
import org.immutables.criteria.adapter.Operations;
import org.immutables.criteria.adapter.Backend;
import org.immutables.criteria.repository.Repository;
import org.immutables.criteria.repository.WriteResult;
import org.immutables.criteria.repository.Watcher;
import org.immutables.criteria.repository.reactive.ReactiveRepository;
import org.immutables.criteria.repository.reactive.ReactiveReader;
import org.immutables.criteria.repository.reactive.ReactiveWatcher;

import org.reactivestreams.Publisher;

import java.util.Objects;
import java.util.List;
import java.util.function.Function;

/**
 * A {@code [type.name]Repository} provides access for storing and retrieving objects
 * from a generic data-source based on {@link [type.name]Criteria}.
 */
[if type allowsClasspathAnnotation 'javax.annotation.concurrent.ThreadSafe']
@javax.annotation.concurrent.ThreadSafe
[/if]
[type.typeDocument.access] class [type.name]Repository implements Repository<[type.name]>[output.trim]
[for facet in type.criteriaRepository.facets], [facet.interfaceType][/for] {[/output.trim]
[for a = type.idAttribute]
[if a]
  /** Function to extract {@code [a.name]} attribute from {@link [type.name]} */
  private static final Function<? super [type.name], [a.type]> ID_EXTRACTOR = [type.name]::[a.name];
[/if]
[/for]

  private final Backend backend;

  [for facet in type.criteriaRepository.facets]
  private final [facet.fieldType] [facet.name];
  [/for]

  public [type.name]Repository(Backend backend) {
    this.backend = Objects.requireNonNull(backend, "backend");
    [for facet in type.criteriaRepository.facets]
    this.[facet.name] = new [facet.fieldType]([if facet.name eq 'readable'][type.name].class, [/if]backend);
    [/for]
  }

[for a = type.idAttribute]
[if a]
  /**
   * Find all [type.name](s) given their ids {@code [a.name]}
   */
  public ReactiveReader<[type.name]> findById([a.type] ... [a.name]s) {
    return findById(java.util.Arrays.asList([a.name]s));
  }

  /**
   * Find all [type.name](s) given their ids {@code [a.name]}
   */
  public ReactiveReader<[type.name]> findById(Iterable<? extends [a.type]> [a.name]s) {
    return find([type.name]Criteria.[toLower type.name].[a.name].isIn([a.name]s));
  }
[/if]
[/for]

  @Override
  public ReactiveReader<[type.name]> find(Criterion<[type.name]> criteria) {
    return readable.find(criteria);
  }

  @Override
  public ReactiveReader<[type.name]> findAll() {
    return readable.findAll();
  }

[if not type.criteriaRepository.readonly]
  @Override
  public Publisher<WriteResult> insert(Iterable<? extends [type.name]> docs) {
  [for a = type.idAttribute]
  [if a]
    return backend.execute(Operations.Insert.ofKeyed(docs, ID_EXTRACTOR));
  [else]
    return writable.insert(docs);
  [/if]
  [/for]
  }

  @Override
  public Publisher<WriteResult> delete(Criterion<[type.name]> criteria) {
    return writable.delete(criteria);
  }
[/if]

[if type.criteriaRepository.watch]
  @Override
  public ReactiveWatcher<[type.name]> watcher(Criterion<[type.name]> criteria) {
    return watchable.watcher(criteria);
  }
[/if]
}

[/template]
