[--
   Copyright 2014-2019 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for type in values.values if type.generateRepository]
    [if type.kind.isValue andnot type.generics]
[output.java type.package (type.name 'Repository') type.element]
[type.sourceHeader]
[generateRepository type]
[/output.java]
    [else]
[output.error]
Use @Criteria.Repository to annotate @Value.Immutable abstract value types with no type variables
[/output.error]
    [/if]
  [/for]
[/template]

[-- Actual generator for Repository --]
[template generateRepository Type type]
[if type.package]
package [type.package];
[/if]

import org.immutables.criteria.Repository;
import org.immutables.criteria.DocumentCriteria;

/**
 * A {@code [type.name]Repository} provides access for storing and retrieving objects
 * from a generic data-source based on {@link [type.name]Criteria}.
 */
[if type allowsClasspathAnnotation 'javax.annotation.concurrent.ThreadSafe']
@javax.annotation.concurrent.ThreadSafe
[/if]
[type.typeDocument.access] class [type.name]Repository implements Repository<[type.name]> {

  @Override
  public Repository.Finder<[type.name]> find(DocumentCriteria<[type.name]> criteria) {
    throw new UnsupportedOperationException();
  }
}

[/template]
