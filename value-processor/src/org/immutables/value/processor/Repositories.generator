[--
   Copyright 2014-2018 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public generate]
  [for type in values.values if type.generateRepository]
    [if type.kind.isValue andnot type.generics]
[output.java type.package (type.name 'Repository') type.element]
[type.sourceHeader]
[generateRepository type]
[/output.java]
    [else]
[output.error]
Use @Mongo.Repository to annotate @Value.Immutable abstract value types with no type variables
[/output.error]
    [/if]
  [/for]
[/template]

[template generateRepository Type type]
[if type.package]
package [type.package];
[/if]

import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import org.immutables.mongo.repository.Repositories;
import org.immutables.mongo.repository.RepositorySetup;
import org.immutables.mongo.concurrent.FluentFuture;
import org.immutables.mongo.repository.internal.Constraints;
import org.immutables.mongo.repository.internal.Support;

import org.bson.codecs.Encoder;
import org.bson.codecs.configuration.CodecRegistry;
import org.bson.conversions.Bson;
[for starImport in type.requiredSourceStarImports]
import [starImport];
[/for]

/**
 * A {@code [type.name]Repository} provides type-safe access for storing and retrieving documents
 * from the MongoDB collection {@code "[type.documentName]"}.
 [if type.repository.readonly]
 *
 * This repository was marked as readonly and therefore write operations have been disabled.
 [/if]
 */
[atGenerated type]
[if type.generateSuppressAllWarnings]@SuppressWarnings("all")[/if]
[if type allowsClasspathAnnotation 'javax.annotation.ParametersAreNonnullByDefault']
@javax.annotation.ParametersAreNonnullByDefault
[/if]
[if type allowsClasspathAnnotation 'javax.annotation.processing.Generated']
@javax.annotation.processing.Generated("org.immutables.processor.ProxyProcessor")
[else if type allowsClasspathAnnotation 'javax.annotation.Generated']
@javax.annotation.Generated("org.immutables.processor.ProxyProcessor")
[/if]
[if type allowsClasspathAnnotation 'javax.annotation.concurrent.ThreadSafe']
@javax.annotation.concurrent.ThreadSafe
[/if]
[type.typeDocument.access]class [type.name]Repository extends Repositories.Repository<[type.typeDocument]> {
  private static final String DOCUMENT_COLLECTION_NAME = "[type.documentName]";

  private final Serialization serialization;
  private final Criteria anyCriteria;

  /**
   * Constructs a {@link [type.name]} repository using {@link RepositorySetup configuration}.
   * @param configuration The repository configuration
   */
  public [type.name]Repository(RepositorySetup configuration) {
    super(configuration, DOCUMENT_COLLECTION_NAME, [type.typeDocument].class);
    this.serialization = new Serialization(codecRegistry(), fieldNamingStrategy());
    this.anyCriteria = new Criteria(this.serialization, Constraints.nilConstraint());
  }
  [if not type.repository.readonly]

  /**
   * Inserts a single document into the collection.
   * @param document The [toLower type.name] to insert
   * @return A future representing the number of inserted documents (1) if WriteConcern allows the insertion.
   */
  public FluentFuture<Integer> insert([type.typeDocument] document) {
    return super.doInsert(com.google.common.collect.ImmutableList.of(document));
  }

  /**
   * Insert documents into the collection.
   * @param documents The documents to insert
   * @return A future representing the number of inserted documents if WriteConcern allows the insertion.
   */
  public FluentFuture<Integer> insert(Iterable<? extends [type.typeDocument]> documents) {
    return super.doInsert(com.google.common.collect.ImmutableList.copyOf(documents));
  }
  [/if]

  /**
   * Finds all documents. Use the returned {@link Finder} object to complete
   * {@link Finder#fetchAll() fetch all} or other operations.
   * @return A finder object used to complete operations
   */
  [atCheckReturnValue type]
  public Finder findAll() {
    return find(criteria());
  }

  /**
   * Find documents by the criteria expressed as a JSON string. Use the returned {@link Finder} object to complete
   * {@link Finder#fetchAll() fetch} or {@link Finder#fetchFirst() fetch} operations.
   * @param jsonCriteria A JSON string for native criteria
   * @return A finder object used to complete operations
   */
  [atCheckReturnValue type]
  public Finder find(String jsonCriteria) {
    return new Finder(this, Support.jsonQuery(jsonCriteria));
  }
[for a = type.idAttribute]
[if a]

  /**
   * Find documents by the {@link [type.name]#[a.names.get]() [a.name]} identity attribute. Use the returned {@link Finder} object to complete
   * {@link Finder#fetchFirst() fetch} or {@link Finder#fetchAll() fetchAll} read operations.
   [if not type.repository.readonly]
   * You can also use {@link Finder#andModifyFirst() modify}, {@link Finder#andReplaceFirst([type.typeDocument.relativeRaw]) replace}
   * or {@link Finder#deleteFirst() delete} operations to update / delete the document.
   [/if]
   * @param [a.name] The exact {@code [a.name]} value
   * @return A finder object used to complete operations
   */
  [atCheckReturnValue type]
  public Finder findBy[toUpper a.name]([a.type] [a.name]) {
    return find(criteria().[a.name]([a.name]));
  }
  [if not type.repository.readonly]

  /**
   * Update or insert a document, matched by the identifier value of the '[a.name]' attribute.
   * @param document The [toLower type.name] to upsert
   * @return A future representing the of number of inserted documents (1) if WriteConcern allows the insertion.
   */
  public FluentFuture<Integer> upsert([type.typeDocument] document) {
    Criteria byId = criteria().[a.name](document.[a.names.get]());
    return super.doUpsert(byId.constraint, document);
  }
  [/if]
[/if]
[/for]
  [generateFinder type]
[if not type.repository.readonly]
  [generateUpdater type]
  [generateModifier type]
  [generateReplacer type]
[/if]
[if type.repository.index]
  [generateIndexer type]
[/if]
  [generateCriteria type]
  [generateSerializationHelpers type]
}
[/template]

[template generateOrderingAndExcludes Type type String tT]
  [for a in type.allMarshalingAttributes]

/**
 * Order by {@link [type.name]#[a.names.get]() [a.name]} in the ascending direction.
 * Specify that the next attribute to sort will be the {@link [type.name]#[a.names.get]() [a.name]} attribute using ascending order
 * in the the chain of comparisons performed to sort results.
 * @return {@code this} [toLower tT] for use in a chained invocation
 */
public [tT] orderBy[toUpper a.name]() {
  ordering = ordering.equal(serialization.[a.name]Name, false, 1);
  return this;
}

/**
 * Order by {@link [type.name]#[a.names.get]() [a.name]} in the descending direction.
 * Specify that the next attribute to sort will be the {@link [type.name]#[a.names.get]() [a.name]} attribute using descending order
 * in the the chain of comparisons performed to sort results.
 * @return {@code this} [toLower tT] for use in a chained invocation
 */
public [tT] orderBy[toUpper a.name]Desceding() {
  ordering = ordering.equal(serialization.[a.name]Name, false, -1);
  return this;
}
  [/for]
  [for a in type.excludableAttributes]

/**
 * Exclude the {@link [type.name]#[a.names.get]() [a.name]} attribute from each document in the results.
 * @return {@code this} [toLower tT] for use in a chained invocation
 */
public [tT] exclude[toUpper a.name]() {
  exclusion = exclusion.equal(serialization.[a.name]Name, false, -1);
  return this;
}
  [/for]
[/template]

[template generateFinder Type type]

/**
 * Find a document by the given {@link [type.name]Repository#criteria() criteria}. Use the returned {@link Finder} object to complete
 * {@link Finder#fetchAll() fetch}  operations.
 [if not type.repository.readonly]
 * You can also use {@link Finder#andModifyFirst() modify} or {@link Finder#deleteFirst() delete}
 * operations to update / delete the document(s).
 [/if]
 * @param criteria The search criteria
 * @return A finder object used to complete operations
 */
[atCheckReturnValue type]
public Finder find(Criteria criteria) {
  return new Finder(this, criteria.constraint);
}

/**
 * The finder object used to proceed with find operations via the
 * {@link Finder#fetchAll()}, {@link Finder#fetchFirst()}[if not type.repository.readonly], {@link Finder#andModifyFirst()}, or {@link Finder#deleteFirst()}[/if] methods.
 * Configure exclusion and sort ordering for results using the family of {@code exclude*()} and {@code orderBy*()} attribute-specific methods.
 * @see [type.name]Repository#find(Criteria)
 */
[atGenerated type]
[atNotThreadSafe type]
public static final class Finder extends Repositories.[if type.repository.readonly]Finder[else]FinderWithDelete[/if]<[type.typeDocument], Finder> {
  private final Serialization serialization;

  private Finder([type.name]Repository repository, Constraints.ConstraintHost criteria) {
    super(repository);
    this.criteria = criteria;
    this.serialization = repository.serialization;
  }
  [generateOrderingAndExcludes type 'Finder']
[if not type.repository.readonly]
  [generateAndModifyFirst type]
  [generateAndReplaceFirst type]
[/if]
}
[/template]

[template generateAndReplaceFirst Type type]

/**
 * Used to replace in-place existing version of the document
 */
[atCheckReturnValue type]
public Replacer andReplaceFirst([type.typeDocument] document) {
  return new Replacer(([type.name]Repository) repository, document, criteria, ordering);
}
[/template]

[template generateAndModifyFirst Type type]

/**
 * Turn a find operation into an atomic {@link DBCollection#findAndModify(DBObject, DBObject, DBObject, boolean, DBObject, boolean, boolean) findAndModify}
 * operation. Use the family of {@code set*()}, {@code unset*()}, {@code add*()}, {@code remove*()}, {@code put*()}m and {@code init*()}
 * (and other attribute-specific) methods to describe the modification.
 * @return A modifier object to complete the {@code findAndModify} operation
 */
[atCheckReturnValue type]
public Modifier andModifyFirst() {
  return new Modifier(([type.name]Repository) repository, criteria, ordering, exclusion);
}
[/template]

[template generateIndexer Type type]

/**
 * {@link DBCollection#createIndex(DBObject, DBObject) Ensure an index} on collection [type.documentName] by one or
 * more attributes using the family of {@code with*()} attribute-specific methods.
 * While indexes will usually be maintained by special administration scripts, for simple cases it is convenient
 * to ensure an index on application startup.
 * @see Indexer#named(String)
 * @see Indexer#unique()
 * @return An indexer object to be completed with the {@link Indexer#ensure()} operation.
 */
[atCheckReturnValue type]
public Indexer index() {
  return new Indexer(this);
}

/**
 * An indexer used to create an index on the {@code "[type.documentName]"} collection if it does not exist by one or more attributes.
 * @see DBCollection#createIndex(DBObject, DBObject)
 */
[atGenerated type]
[atNotThreadSafe type]
public static final class Indexer extends Repositories.Indexer<[type.typeDocument], Indexer> {
  private final Serialization serialization;

  private Indexer([type.name]Repository repository) {
    super(repository);
    this.serialization = repository.serialization;
  }
[for a in type.allMarshalingAttributes]

  /**
   * Specify that the next attribute to index will be {@link [type.name]#[a.names.get]() [a.name]}, in the ascending direction.
   * @return {@code this} indexer for use in a chained invocation
   */
  public Indexer with[toUpper a.name]() {
    fields = fields.equal(serialization.[a.name]Name, false, 1);
    return this;
  }

  /**
   * Specify that the next attribute to index will be {@link [type.name]#[a.names.get]() [a.name]}, in the descending direction.
   * @return {@code this} indexer for use in a chained invocation
   */
  public Indexer with[toUpper a.name]Desceding() {
    fields = fields.equal(serialization.[a.name]Name, false, -1);
    return this;
  }
[/for]
}
[/template]

[template generateUpdater Type type]

/**
 * Update the set of {@code "[type.documentName]"} documents.
 * @param criteria The search criteria for update
 * @return An updater object that will be used to complete the update.
 */
[atCheckReturnValue type]
public Updater update(Criteria criteria) {
  return new Updater(this, criteria);
}

/**
 * {@link #update(Criteria) Given} the criteria updater describes how to perform
 * update operations on sets of documents.
 */
[atGenerated type]
[atNotThreadSafe type]
public static final class Updater extends Repositories.Updater<[type.typeDocument]> {
  private final Serialization serialization;

  private Updater([type.name]Repository repository, Criteria criteria) {
    super(repository);
    this.criteria = criteria.constraint;
    this.serialization = repository.serialization;
  }
[generateUpdatingMethods type 'Updater']
}
[/template]

[template generateReplacer Type type]

[atGenerated type]
[atNotThreadSafe type]
public static final class Replacer extends Repositories.Replacer<[type.typeDocument], Replacer> {
  protected Replacer([type.name]Repository repository, [type.typeDocument] document, Constraints.ConstraintHost criteria, Constraints.Constraint ordering) {
    super(repository, document, criteria, ordering);
  }
}
[/template]

[template generateModifier Type type]

[atGenerated type]
[atNotThreadSafe type]
public static final class Modifier extends Repositories.Modifier<[type.typeDocument], Modifier> {
  private final Serialization serialization;

  private Modifier(
      [type.name]Repository repository,
      Constraints.ConstraintHost criteria,
      Constraints.Constraint ordering,
      Constraints.Constraint exclusion) {
    super(repository);
    this.serialization = repository.serialization;
    this.criteria = criteria;
    this.ordering = ordering;
    this.exclusion = exclusion;
  }
[generateUpdatingMethods type 'Modifier']
}
[/template]

[template generateUpdatingMethods Type type String tT]
[for a in type.allMarshalingAttributes,
    wW = a.wrappedElementType,
    uU = a.unwrappedElementType]
  [if a.collectionType]

  /**
   * Clear the {@code [a.name]} [toLower a.rawCollectionType] attribute.
   * <p>
[if a.forcedEmpty]
   * Corresponds to the MongoDB {@code $set} operator resetting to empty array
[else]
   * Corresponds to the MongoDB {@code $unset} operator
[/if]
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] clear[toUpper a.name]() {
  [if a.forcedEmpty]
    setFields = setFields.equal(serialization.[a.name]Name, false, com.google.common.collect.ImmutableList.<Object>of());
  [else]
    unsetFields = unsetFields.equal(serialization.[a.name]Name, false, 1);
  [/if]
    return this;
  }

  /**
   * Remove a value from the {@code [a.name]} [toLower a.rawCollectionType] attribute.
   * <p>
   * Corresponds to the MongoDB {@code $pull} operator.
   * @param value The value to remove
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] remove[toUpper a.name]([uU] value) {
    pullFields = pullFields.equal(serialization.[a.name]Name, false, [wrapMarshalable a]value));
    return this;
  }

  /**
   * Add a value to the {@code [a.name]} [toLower a.rawCollectionType] attribute.
   * <p>
  [if a.setType]
   * Corresponds to the MongoDB {@code $addToSet} operator.
  [else]
   * Corresponds to the MongoDB {@code $push} operator.
  [/if]
   * @param value The value to add
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] add[toUpper a.name]([uU] value) {
  [if a.setType]
    addToSetFields = addToSetFields.equal(serialization.[a.name]Name, false, [wrapMarshalable a]value));
  [else]
    pushFields = pushFields.equal(serialization.[a.name]Name, false, [wrapMarshalable a]value));
  [/if]
    return this;
  }

  /**
   * Override all values of {@code [a.name]} [toLower a.rawCollectionType] attribute.
   *
   * <p>Corresponds to the MongoDB {@code $set} operator on the array field.
   * @param values The values to set
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
   public [tT] set[toUpper a.name](Iterable<[a.consumedElementType]> values) {
     java.util.List<Object> wrappedValues = new java.util.ArrayList[asDiamond 'Object']();
     for ([wW] value : values) {
       wrappedValues.add([wrapMarshalable a]value));
     }

     setFields = setFields.equal(serialization.[a.name]Name, false, wrappedValues);
     return this;
   }

  /**
   * Add all of the given values to the {@code [a.name]} [toLower a.rawCollectionType] attribute.
   * <p>
  [if a.setType]
   * Corresponds to the MongoDB {@code $addToSet} operator with the {@code $each} modifier.
  [else]
   * Corresponds to the MongoDB {@code $push} operator with the {@code $each} modifier.
  [/if]
   * @param values The values to add
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] addAll[toUpper a.name](Iterable<[a.consumedElementType]> values) {
    java.util.List<Object> wrappedValues = new java.util.ArrayList[asDiamond 'Object']();
    for ([wW] value : values) {
      wrappedValues.add([wrapMarshalable a]value));
    }
    if (wrappedValues.isEmpty()) {
      return this;
    }
    Object v = wrappedValues.size() == 1
        ? wrappedValues.get(0)
        : Support.bsonObjectAttribute("$each", wrappedValues);

  [if a.setType]
    addToSetFields = addToSetFields.equal(serialization.[a.name]Name, false, v);
  [else]
    pushFields = pushFields.equal(serialization.[a.name]Name, false, v);
  [/if]
    return this;
  }

[/if]
[if not a.collectionType]
  [if a.mapType]

  /**
   * Clear the {@code [a.name]} map attribute.
   * <p>
   * Corresponds to the MongoDB {@code $set} operator, used to reset to empty object
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] clear[toUpper a.name]() {
    setFields = setFields.equal(serialization.[a.name]Name, false, Support.emptyBsonObject());
    return this;
  }

  /**
   * Put the given key and value into the {@code [a.name]} map attribute.
   * <p>
   * Corresponds to the MongoDB {@code $set} operator for nested objects
   * @param key The key
   * @param value The value
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] put[toUpper a.name]([uU] key, [a.unwrappedSecondaryElementType] value) {
    setFields = setFields.equal(serialization.[a.name]Name + "." + key, false, [wrapSecondaryMarshalable a]value));
    return this;
  }

  /**
   * Remove the key to value mapping from the {@code [a.name]} map attribute.
   * <p>
   * Corresponds to MongoDB {@code $unset} operator for nested objects
   * @param key The key
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] remove[toUpper a.name]([uU] key) {
    unsetFields = unsetFields.equal(serialization.[a.name]Name + "." + key, false, 1);
    return this;
  }
  [else]
    [if a.optionalType]

  /**
   * Clear the optional {@code [a.name]} attribute.
   * <p>
[if a.forcedEmpty]
   * Corresponds to the MongoDB {@code $set} operator resetting to {@code null}
[else]
   * Corresponds to the MongoDB {@code $unset} operator
[/if]
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] empty[toUpper a.name]() {
      [if a.forcedEmpty]
    setFields = setFields.equal(serialization.[a.name]Name, false, null);
      [else]
    unsetFields = unsetFields.equal(serialization.[a.name]Name, false, 1);
      [/if]
    return this;
  }
    [/if]

  /**
   * Specify a new value for the {@code [a.name]} attribute.
   * <p>
   * Corresponds to the MongoDB {@code $set} operator.
   * @param value A new value for the {@code [a.name]} attribute
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] set[toUpper a.name]([uU] value) {
    setFields = setFields.equal(serialization.[a.name]Name, false, [wrapMarshalable a]value));
    return this;
  }

  /**
   * Specify an initial value for the {@code [a.name]} attribute. The value will be used if the document is
   * to be inserted. If one or more documents are found for an update, this value will not be used.
   * <p>
   * Corresponds to the MongoDB {@code $setOnInsert} operator.
   * @param value The {@code [a.name]} value for an insert.
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] init[toUpper a.name]([uU] value) {
    setOnInsertFields = setOnInsertFields.equal(serialization.[a.name]Name, false, [wrapMarshalable a]value));
    return this;
  }

    [if a.numberType]
  /**
   * Specify an increment amount for the {@code [a.name]} attribute. If the document is to inserted
   * and no initial value has been provided, then {@code 0} will be the default value and the increment will adjust it.
   * <p>
   * Corresponds to the MongoDB {@code $inc} operator.
   * @param increment An amount by which to increment the {@code [a.name]} attribute (may be negative)
   * @return {@code this} [toLower tT] to be used to complete the update operation
   */
  public [tT] increment[toUpper a.name]([uU] increment) {
    incrementFields = incrementFields.equal(serialization.[a.name]Name, false, increment);
    return this;
  }
      [/if]
    [/if]
  [/if]
[/for]
[/template]

[template generateCriteria Type type]

/**
 * Search criteria.
 * Returns an initial object to create criteria by invoking methods that describe attribute specific constraints.
 * @return An empty immutable criteria
 */
public Criteria criteria() {
  return anyCriteria;
}

@com.google.common.annotations.Beta
Bson toBson(Criteria criteria) {
  return Support.convertToBson(criteria.constraint);
}

/**
 * {@code [type.name]Repository.Criteria} is a [type.name] document search query.
 * Call methods on the criteria to add constraints for search queries.
 */
[atGenerated type]
@javax.annotation.concurrent.Immutable
@SuppressWarnings("unchecked")
public static final class Criteria extends Repositories.Criteria {
  private final Constraints.Constraint constraint;
  private final Serialization serialization;

  Criteria(Serialization serialization, Constraints.Constraint constraint) {
    this.constraint = constraint;
    this.serialization = serialization;
  }
[for a in type.allMarshalingAttributes,
     wW = a.wrappedElementType,
     uU = a.unwrappedElementType]
[if a.collectionType]

  public Criteria [a.name]Empty() {
    return new Criteria(serialization, constraint.size(serialization.[a.name]Name, false, 0));
  }

  public Criteria [a.name]NonEmpty() {
    return new Criteria(serialization, constraint.size(serialization.[a.name]Name, true, 0));
  }

  public Criteria [a.name]Size(int size) {
    return new Criteria(serialization, constraint.size(serialization.[a.name]Name, false, size));
  }

  public Criteria [a.name]Contains([uU] value) {
    return new Criteria(serialization, constraint.equal(serialization.[a.name]Name, false, [wrapMarshalable a]value)));
  }

  public Criteria [a.name]ContainsAll(Iterable<[wW]> values) {
    java.util.List<Object> wrappedValues = new java.util.ArrayList[asDiamond 'Object']();
    for ([wW] value : values) {
      wrappedValues.add([wrapMarshalable a]value));
    }
    return new Criteria(serialization, constraint.nested(serialization.[a.name]Name, Constraints.nilConstraint().equal("$all", false, wrappedValues)));
  }
  [if wW eq 'java.lang.String']

  public Criteria [a.name]AnyStartsWith(String prefix) {
    return new Criteria(serialization, constraint.match(serialization.[a.name]Name, false, Constraints.prefixPatternOf(prefix)));
  }

  public Criteria [a.name]AnyMatches(java.util.regex.Pattern pattern) {
    return new Criteria(serialization, constraint.match(serialization.[a.name]Name, false, pattern));
  }
  [/if]
[/if]
[if not a.collectionType]
  [-- Nested constraints criteria if document could go here --]

  public Criteria [a.name]([uU] value) {
    return new Criteria(serialization, constraint.equal(serialization.[a.name]Name, false, [wrapMarshalable a]value)));
  }
  [if uU ne 'boolean']

  public Criteria [a.name]Not([uU] value) {
    return new Criteria(serialization, constraint.equal(serialization.[a.name]Name, true, [wrapMarshalable a]value)));
  }

  public Criteria [a.name]In(Iterable<[wW]> values) {
    java.util.List<Object> wrappedValues = new java.util.ArrayList[asDiamond 'Object']();
    for ([wW] value : values) {
      wrappedValues.add([wrapMarshalable a]value));
    }
    return new Criteria(serialization, constraint.in(serialization.[a.name]Name, false, wrappedValues));
  }

  public Criteria [a.name]In([uU] first, [uU] second, [uU]... rest) {
    java.util.List<Object> values = new java.util.ArrayList[asDiamond 'Object'](2 + rest.length);
    values.add([wrapMarshalable a]first));
    values.add([wrapMarshalable a]second));
    for ([uU] value : rest) {
      values.add([wrapMarshalable a]value));
    }
    return new Criteria(serialization, constraint.in(serialization.[a.name]Name, false, values));
  }

  public Criteria [a.name]NotIn(Iterable<[wW]> values) {
    java.util.List<Object> wrappedValues = new java.util.ArrayList[asDiamond 'Object']();
    for ([wW] value : values) {
      wrappedValues.add([wrapMarshalable a]value));
    }
    return new Criteria(serialization, constraint.in(serialization.[a.name]Name, true, wrappedValues));
  }

  public Criteria [a.name]NotIn([uU] first, [uU] second, [uU]... rest) {
    java.util.List<Object> values = new java.util.ArrayList[asDiamond 'Object'](2 + rest.length);
    values.add([wrapMarshalable a]first));
    values.add([wrapMarshalable a]second));
    for ([uU] value : rest) {
      values.add([wrapMarshalable a]value));
    }
    return new Criteria(serialization, constraint.in(serialization.[a.name]Name, true, values));
  }
  [/if]
[if a.stringType or (a.optionalType and (uU eq 'java.lang.String'))]

  public Criteria [a.name]StartsWith(String prefix) {
    return new Criteria(serialization, constraint.match(serialization.[a.name]Name, false, Constraints.prefixPatternOf(prefix)));
  }

  public Criteria [a.name]Matches(java.util.regex.Pattern pattern) {
    return new Criteria(serialization, constraint.match(serialization.[a.name]Name, false, pattern));
  }

  public Criteria [a.name]NotMatches(java.util.regex.Pattern pattern) {
    return new Criteria(serialization, constraint.match(serialization.[a.name]Name, true, pattern));
  }
[/if]
[if a.optionalType]

  public Criteria [a.name]Present() {
  [if type.useConstructorOnly]
    return new Criteria(serialization, constraint.equal(serialization.[a.name]Name, true, null));
  [else]
    return new Criteria(serialization, constraint.present(serialization.[a.name]Name, false));
  [/if]
  }

  public Criteria [a.name]Absent() {
  [if type.useConstructorOnly]
    return new Criteria(serialization, constraint.equal(serialization.[a.name]Name, false, null));
  [else]
    return new Criteria(serialization, constraint.present(serialization.[a.name]Name, true));
  [/if]
  }
[/if]
[if a.comparable]

  public Criteria [a.name]GreaterThan([uU] lower) {
    return [a.name]In(com.google.common.collect.Range.greaterThan(lower));
  }

  public Criteria [a.name]LessThan([uU] upper) {
    return [a.name]In(com.google.common.collect.Range.lessThan(upper));
  }

  public Criteria [a.name]AtMost([uU] upperInclusive) {
    return [a.name]In(com.google.common.collect.Range.atMost(upperInclusive));
  }

  public Criteria [a.name]AtLeast([uU] lowerInclusive) {
    return [a.name]In(com.google.common.collect.Range.atLeast(lowerInclusive));
  }

  public Criteria [a.name]In(com.google.common.collect.Range<[wW]> range) {
    return new Criteria(serialization, constraint.range(serialization.[a.name]Name, false, [wrapMarshalable a]range)));
  }

  public Criteria [a.name]NotIn(com.google.common.collect.Range<[wW]> range) {
    return new Criteria(serialization, constraint.range(serialization.[a.name]Name, true, [wrapMarshalable a]range)));
  }
[/if]
[/if]
[/for]

  @Override
  public Criteria or() {
    return new Criteria(serialization, constraint.disjunction());
  }

  public Criteria with(Criteria criteria) {
    return new Criteria(serialization, criteria.constraint.accept(constraint));
  }

  @Override
  public String toString() {
    return "[type.name]Repository.criteria(" + Support.stringify(constraint) + ")";
  }
}
[/template]

[template generateSerializationHelpers Type type]

[for allAttributes = type.allMarshalingAttributes]
[atGenerated type]
private static class Serialization {
  [for a in allAttributes]
    [if a.requiresMarshalingAdapter]
  final Encoder<[a.elementType]> [a.name]Encoder;
    [/if]
    [if a.requiresMarshalingSecondaryAdapter]
  final Encoder<[a.secondaryElementType]> [a.name]SecondaryEncoder;
    [/if]
  [/for]
  final CodecRegistry registry;
  [for a in allAttributes]
  final String [a.name]Name;
  [/for]

  Serialization(CodecRegistry registry, RepositorySetup.FieldNamingStrategy fieldNamingStrategy) {
    this.registry = registry;
  [for a in allAttributes]
    [if a.requiresMarshalingAdapter]
    [getEncoder a false]
    [/if]
    [if a.requiresMarshalingSecondaryAdapter]
    [getEncoder a true]
    [/if]
  [/for]
  [for a in allAttributes]
    [if a.serializedName]
    this.[a.name]Name = "[a.serializedName]";
    [else]
    this.[a.name]Name = translateName(fieldNamingStrategy, "[a.name]");
    [/if]
  [/for]
  }

  [atGenerated type]
  static final class [type.name]NamingFields[type.generics] {
  [for a in allAttributes]
    public [a.type] [a.name];
  [/for]
  }

  private static String translateName(RepositorySetup.FieldNamingStrategy fieldNamingStrategy, String fieldName) {
    try {
      return fieldNamingStrategy.translateName(
          [type.name]NamingFields.class.getField(fieldName));
    } catch (NoSuchFieldException noSuchField) {
      throw new AssertionError(noSuchField);
    }
  }
}
[/for]
[/template]

[template getEncoder Attribute a Boolean secondary]
[for subs = a.expectedSubtypes,
    Boolean suppotedSubs = ((a.typeKind.mapKind and secondary) ornot a.typeKind.mapKind)]
  [if subs and suppotedSubs]
[output.error a.originalElement]Repositories do not support inline @Gson.ExpectedSubtypes, please put this annotations
on the interface nested in class covered with @Gson.TypeAdapters. Or manually register on GsonBuilder following adapter:
org.immutables.gson.adapter.ExpectedSubtypesAdapter.create(gson, [if secondary][a.typeTokenOfSecondaryElement][else][a.typeTokenOfElement][/if][for s in subs], TypeToken.get([s].class)[/for])
[/output.error]
  [else]
this.[a.name][if secondary]Secondary[/if]Encoder = this.registry.get([if secondary][a.typeTokenOfSecondaryElement][else][a.typeTokenOfElement][/if]);
  [/if]
[/for]
[/template]

[template wrapMarshalable Attribute a][if a.requiresMarshalingAdapter]Support.writable(serialization.[a.name]Encoder, [else]Support.writable([/if][/template]

[template wrapSecondaryMarshalable Attribute a][if a.requiresMarshalingSecondaryAdapter]Support.writable(serialization.[a.name]SecondaryEncoder, [else]Support.writable([/if][/template]

[template atCheckReturnValue HasStyleInfo s][if s allowsClasspathAnnotation 'javax.annotation.CheckReturnValue']@javax.annotation.CheckReturnValue[/if][/template]

[template atNotThreadSafe Type type]
[if type allowsClasspathAnnotation 'javax.annotation.concurrent.NotThreadSafe']
@javax.annotation.concurrent.NotThreadSafe
[/if]
[/template]

[template atGenerated Type type]
[if type allowsClasspathAnnotation 'org.immutables.value.Generated']
@org.immutables.value.Generated(from = "[type.typeAbstract.relativeRaw]", generator = "Repositories")
[/if]
[/template]
