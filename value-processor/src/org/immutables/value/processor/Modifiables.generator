[template public generate]
  [for type in values.values if type.kind.isModifiable]
    [if type.generateOrdinalValue]
[output.error]
Use @Value.Modifiable cannot be used with @Value.Immutable which implements OrdinalValue
[/output.error]
    [else]
[output.java type.package type.names.typeModifiable]
[generateModifiable type true]
[/output.java]
    [/if]
  [/for]
[/template]

[template generateModifiable Type type Boolean topLevel]
[packageWhenTopLevel type topLevel]
[classJavadoc type]
[annotationsWhenTopLevel type topLevel]
[modifiableClass type topLevel]
[/template]

[template classJavadoc Type type]

/**
 * A modifiable implementation of the {@link [type.typeAbstract.relative] [type.typeAbstract.simple]} type.
[if type.names.create eq 'new']
 * <p>Use the constructor to create new modifiable instances. You may even extend this class to
 * add some convenience methods, however most of the methods in this class are final
 * to preserve safety and predictable invariants.
[else]
 * <p>Use the {@link #[type.names.create]()} static factory methods to create new instances.
[/if]
[if type.kind.isValue and type.useCopyConstructor]
 * Use the {@link #[type.names.toImmutable]()} method to convert to canonical immutable instances.
[/if]
 * <p><em>[type.names.typeModifiable] is not thread-safe</em>
[if type.kind.isValue]
 * @see [type.typeValue.relative]
[/if]
 */
[/template]

[template modifiableClass Type type Boolean topLevel]
[for mandatories = type.mandatoryAttributes,
     nondefaults = type.requiresTrackedIsSetNonMandatoryAttributes,
     LongPositions positions = longsFor mandatories,
     LongPositions nondefaultsPositions = longsFor nondefaults]
[type.typeImmutable.access][if not topLevel]static [/if][if type.names.create ne 'new']final [/if][output.linesShortable]class [type.names.typeModifiable]
    [if type.implementing]implements[else]extends[/if] [type.typeAbstract] {[/output.linesShortable]
  [for m in mandatories, BitPosition pos = positions m]
  private static final long INIT_BIT_[toConstant m.name] = [literal.hex pos.mask];
  [/for]
  [for p in nondefaults, BitPosition pos = nondefaultsPositions p]
  private static final long OPT_BIT_[toConstant p.name] = [literal.hex pos.mask];
  [/for]
  [for l in positions.longs]
  private long [disambiguateField type 'initBits'][emptyIfZero l.index] = [literal.hex l.occupation];
  [/for]
  [for l in nondefaultsPositions.longs]
  private long [disambiguateField type 'optBits'][emptyIfZero l.index];
  [/for]
  [if positions.longs or nondefaultsPositions.longs][-- just to separate sections --]

  [/if]
  [for v in type.implementedAttributes if not v.generateDerived]
  [defineField v true]
  [/for]
  [generateConstructors type]
  [generateAccessors type]

  /**
   * Clears the object by setting all attributes to their initial values.
   * @return {@code this} for use in a chained invocation
   */
  public [thisReturnType type] [type.names.clear]() {
    [for l in positions.longs]
    [disambiguateField type 'initBits'][emptyIfZero l.index] = [literal.hex l.occupation];
    [/for]
    [for l in nondefaultsPositions.longs]
    [disambiguateField type 'optBits'][emptyIfZero l.index] = 0;
    [/for]
    [for v in type.implementedAttributes if not v.generateDerived]
    [clearField v true]
    [/for]
    [thisReturn type]
  }
  [generateFrom type]
  [generateSetters type]
  [for m in mandatories, BitPosition pos = positions m]

  /**
   * Returns {@code true} if the required attribute [sourceDocRef type m] is set.
   * @return {@code true} if set
   */
  public final boolean [isSet m]() {
    return ([disambiguateField type 'initBits'][emptyIfZero pos.index] & INIT_BIT_[toConstant m.name]) == 0;
  }
  [/for]
  [for p in nondefaults, BitPosition pos = nondefaultsPositions p]

  /**
   * Returns {@code true} if the [if p.generateDefault]default[else]non-required[/if] attribute [sourceDocRef type p] is set.
   * @return {@code true} if set
   */
  public final boolean [isSet p]() {
    return ([disambiguateField type 'optBits'][emptyIfZero pos.index] & OPT_BIT_[toConstant p.name]) != 0;
  }
  [/for]
  [for v in type.implementedAttributes if v.generateDefault and (not v.primitive)]

  /**
   * Returns {@code true} if the default attribute [sourceDocRef type v] is set.
   * @return {@code true} if set
   */
  public final boolean [isSet v]() {
    return [v.name] != null;
  }
  [/for]

  /**
   * Returns {@code true} if all required attributes are set, indicating that the object is initialized.
   * @return {@code true} if set
   */
  public final boolean [isInitialized type]() {
    [if positions.longs]
    return [for l in positions.longs][if not for.first]
        && [/if][disambiguateField type 'initBits'][emptyIfZero l.index] == 0[/for];
    [else]
    return true;
    [/if]
  }
  [if positions.longs]

  private void [disambiguateAccessor type 'checkRequiredAttributes']() {
    if (![isInitialized type]()) {
      throw new IllegalStateException([disambiguateAccessor type 'formatRequiredAttributesMessage']());
    }
  }

  private String [disambiguateAccessor type 'formatRequiredAttributesMessage']() {
    java.util.List<String> attributes = [if type.generateJdkOnly]new java.util.ArrayList<String>()[else][guava].collect.Lists.newArrayList()[/if];
    [for m in mandatories]
    if (![m.names.isSet]()) attributes.add("[m.name]");
    [/for]
    return "[type.name] in not initialized, some of the required attributes are not set " + attributes;
  }
  [/if]
[if type.kind.isValue and type.useCopyConstructor]

  /**
   * Converts to {@link [type.typeValue.relative] [type.typeValue.simple]}.
   * @return An immutable instance of [type.name]
   */
  public final [type.typeValue] [type.names.toImmutable]() {
  [if mandatories]
    [disambiguateAccessor type 'checkRequiredAttributes']();
  [/if]
    return [type.factoryCopyOf](this);
  }
[/if]
  [generateEqualsHashCode type]
  [generateToString type]
[if topLevel and type.generateJdkOnly]
  [im.objectsUtility type]
[/if]
[if topLevel and (type.generateJdkOnly and type.useCollectionUtility)]
  [im.collectionUtility type]
[/if]
}
[/for]
[/template]

[template generateConstructors Type type]
[for Boolean useFactoryMethod = type.names.create ne 'new']
[let constructorAccess][if useFactoryMethod]private[else]public[/if] [/let]
[let constructorParameters][output.linesShortable][for p in type.constructorArguments][if not for.first],
  [/if][p.atNullability][constructorAcceptType p] [p.name][/for][/output.linesShortable][/let]
[let constructorParametersSupplied][for p in type.constructorArguments][if not for.first], [/if][p.name][/for][/let]
[if type.useConstructor]
  [if not useFactoryMethod]

/**
 * Construct a modifiable instance of {@code [type.typeAbstract.simple]}.
[for p in type.constructorArguments]
 * @param [p.name] The value for the [sourceDocRef type p] attribute [if p.nullable](can be {@code null})[/if]
[/for]
 */
[constructorAccess][type.names.typeModifiable]([constructorParameters]) {
  [for v in type.constructorArguments]
    [if v.collectionType]
  [v.names.addAll]([v.name]);
    [else if v.mapType]
  [v.names.putAll]([v.name]);
    [else]
  [v.names.set]([v.name]);
    [/if]
  [/for]
}
  [/if]
[/if]
[if useFactoryMethod or type.useConstructor][-- do not generate empty constructor if not necessary --]

  [if not useFactoryMethod]
/**
 * Construct a modifiable instance of {@code [type.typeAbstract.simple]}.
 */
  [/if]
[constructorAccess][type.names.typeModifiable]() {}
[/if]
[if useFactoryMethod]
  [if type.useConstructor]

/**
 * Construct a modifiable instance of {@code [type.typeAbstract.simple]}.
[for p in type.constructorArguments]
 * @param [p.name] The value for the [sourceDocRef type p] attribute [if p.nullable](can be {@code null})[/if]
[/for]
 * @return A new modifiable instance
 */
public static [thisReturnType type] [type.names.create]([constructorParameters]) {
  return new [type.names.typeModifiable]()[for v in type.constructorArguments]
    [if v.collectionType]
      .[v.names.addAll]([v.name])[else if v.mapType]
      .[v.names.putAll]([v.name])[else]
      .[v.names.set]([v.name])[/if][/for];
}
  [/if]

/**
 * Construct a modifiable instance of {@code [type.typeAbstract.simple]}.
 * @return A new modifiable instance
 */
public static [thisReturnType type] [type.names.create]() {
  return new [type.names.typeModifiable]();
}
[/if]
[/for]
[/template]

[template generateFrom Type type]
[if type.generateFilledFrom]
[if type.buildFromTypes.hasManySupertypes]
  [for s in type.buildFromTypes.supertypes]

/**
 * Fill this modifiable instance with attribute values from the provided {@link [s.type]} instance.
 * @param instance The instance from which to copy values
 * @return {@code this} for use in a chained invocation
 */
public [thisReturnType type] [type.names.from]([s.type] instance) {
  [requireNonNull type](instance, "instance");
  from((Object) instance);
  [thisReturn type]
}
  [/for]

private void from(Object object) {
[for bs = type.buildFromTypes]
[for l in bs.positions.longs]
  long bits[emptyIfZero l.index] = 0;
  [/for]
[for s in bs.supertypes if s.attributes]
  if (object instanceof [s.type]) {
    [s.type] instance = ([s.type]) object;
    [for v in s.attributes, BitPosition pos = bs.positions v.name]
    [if pos]
    if ((bits[emptyIfZero pos.index] & [literal.hex pos.mask]) == 0) {
      [buildFromAttribute v]
      bits[emptyIfZero pos.index] |= [literal.hex pos.mask];
    }
    [else]
    [buildFromAttribute v]
    [/if]
    [/for]
  }
[/for]
[/for]
}
[else]

/**
 * Fill this modifiable instance with attribute values from the provided {@link [type.typeAbstract.relative]} instance.
 * Regular attribute values will be overridden, i.e. replaced with ones of an instance.
 * Any of the instance's absent optional values will not be copied (will not override current values).
[if type.hasSettableCollection or type.hasSettableMapping]
 * Collection elements and entries will be added, not replaced.
[/if]
 * @param instance The instance from which to copy values
 * @return {@code this} for use in a chained invocation
 */
public [thisReturnType type] [type.names.from]([type.typeAbstract] instance) {
  [requireNonNull type](instance, "instance");
[for v in type.settableAttributes]
  [buildFromAttribute v]
[/for]
  [thisReturn type]
}
[/if]
[/if]
[/template]

[template generateAccessors Type type]
  [for v in type.implementedAttributes]

/**
  [if v.docComment]
[for d in v.docComment]
 *[d][-- no space before doc line!]
[/for]
  [else]
[if v.arrayType]
 * @return assigned modifiable {@code [v.name]} array
[else if v.generateLazy]
 * @return newly computed, not cached value of {@code [v.name]} attribute
[else if v.generateDerived]
 * @return newly computed, not cached value of {@code [v.name]} attribute
[else if v.generateDefault]
 * @return assigned or, otherwise, newly computed, not cached value of {@code [v.name]} attribute
[else if v.collectionType]
 * @return modifiable [toLower v.rawCollectionType] {@code [v.name]}
[else]
 * @return value of {@code [v.name]} attribute[if v.nullable], may be {@code null}[/if]
[/if]
  [/if]
 */
[for a in v.annotations]
[a]
[/for]
[deprecation v]
@Override
[if v.isPublic]public [/if]final [v.atNullability][v.type] [v.names.get]() {
[if v.mandatory]
  if (![isSet v]()) {[-- opportunistically reuse attributes check --]
    [disambiguateAccessor type 'checkRequiredAttributes']();
  }
[/if]
[if v.generateLazy]
  return [invokeSuper v].[v.names.get]();
[else if v.generateDerived]
  return [invokeSuper v].[v.names.get]();
[else if v.generateDefault]
  return [isSet v]()
      ? [v.name]
      : [invokeSuper v].[v.names.get]();
[else]
  return [v.name];
[/if]
}
  [/for]
[/template]

[template generateSetters Type type]
[for mandatories = type.mandatoryAttributes,
     nondefaults = type.requiresTrackedIsSetNonMandatoryAttributes,
     LongPositions positions = longsFor mandatories,
     LongPositions nondefaultsPositions = longsFor nondefaults]
[-- Being called from builder initializer methods --]
[let nondefaultSetter Attribute v]
[if v.requiresTrackIsSet][for BitPosition pos = nondefaultsPositions v]
[disambiguateField type 'optBits'][emptyIfZero pos.index] |= OPT_BIT_[toConstant v.name];
[/for][/if]
[/let]
[-- Being called from builder initializer methods --]
[let mandatorySetter Attribute v]
[if v.mandatory][for BitPosition pos = positions v]
[disambiguateField type 'initBits'][emptyIfZero pos.index] &= ~INIT_BIT_[toConstant v.name];
[/for][/if]
[/let]
[for v in type.settableAttributes]
[if v.collectionType]

/**
 * Adds one element to [sourceDocRef type v] [toLower v.rawCollectionType].
 * @param element The [v.name] element
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.add]([v.unwrappedElementType] element) {
  [if v.unwrappedElementPrimitiveType]
  [v.name].add(element);
  [else]
  [v.name].add([requireNonNull type](element, "[v.name] element"));
  [/if]
  [thisReturn type]
}

/**
 * Adds elements to [sourceDocRef type v] [toLower v.rawCollectionType].
 * @param elements An array of [v.name] elements
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
[varargsSafety v]
public [thisReturnType type] [v.names.add]([v.unwrappedElementType]... elements) {
  for ([v.unwrappedElementType] element : elements) {
    [if v.unwrappedElementPrimitiveType]
    [v.name].add(element);
    [else]
    [v.name].add([requireNonNull type](element, "[v.name] element"));
    [/if]
  }
  [thisReturn type]
}

/**
 * Sets or replaces all elements for [sourceDocRef type v] [toLower v.rawCollectionType].
 * @param elements An iterable of [v.name] elements
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.set](Iterable<[v.consumedElementType]> elements) {
  [v.name].clear();
  return [v.names.addAll](elements);
}

/**
 * Adds elements to [sourceDocRef type v] [toLower v.rawCollectionType].
 * @param elements An iterable of [v.name] elements
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.addAll](Iterable<[v.consumedElementType]> elements) {
  for ([v.unwrappedElementType] element : elements) {
    [if v.unwrappedElementPrimitiveType]
    [v.name].add(element);
    [else]
    [v.name].add([requireNonNull type](element, "[v.name] element"));
    [/if]
  }
  [thisReturn type]
}
[else if v.optionalType]

/**
 * Assigns a <i>present</i> value for the optional [sourceDocRef type v] attribute.
 * @param [v.name] A value for [v.name][if v.optionalAcceptNullable], {@code null} is accepted as {@code [optionalEmpty v]}[/if]
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.set]([atNullableAccept v][v.unwrappedElementType] [v.name]) {
  this.[v.name] = [optionalOf v]([v.name]);
  [nondefaultSetter v]
  [thisReturn type]
}

/**
 * Assigns an optional value for [sourceDocRef type v].
 * @param [v.name] A value for [v.name]
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.set]([v.rawType][if not v.jdkSpecializedOptional]<[v.wrappedElementType]>[/if] [v.name]) {
  this.[v.name] = [requireNonNull type]([v.name], "[v.name]");
  [nondefaultSetter v]
  [thisReturn type]
}
[else if v.mapType]
  [for gE = v.consumedElementType, uK = v.unwrappedElementType, wK = v.wrappedElementType, uV = v.unwrappedSecondaryElementType, wV = v.wrappedSecondaryElementType]
    [if v.multimapType]

/**
 * Put all mappings from the specified key to values for [sourceDocRef type v] [toLower v.mapType]. Nulls are not permitted
 * @param key The key for [v.name]
 * @param values The values for [v.name]
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.put]([uK] key, [uV]... values) {
  [v.name].putAll(key, [im.arrayAsListSecondary v 'values']);
  [thisReturn type]
}

/**
 * Put all mappings from the specified key to values for [sourceDocRef type v] [toLower v.mapType]. Nulls are not permitted
 * @param key The key for [v.name]
 * @param values The values for [v.name]
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.putAll]([uK] key, Iterable<[wV]> values) {
  [v.name].putAll(key, values);
  [thisReturn type]
}
    [/if]

/**
 * Put one entry to the [sourceDocRef type v] map.
 * @param key The key in [v.name] map
 * @param value The associated value in the [v.name] map
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.put]([uK] key, [uV] value) {
  [v.name].put(
      [if not v.unwrappedElementPrimitiveType][requireNonNull type](key, "[v.name] key")[else]key[/if],
      [if not v.unwrappedSecondaryElementPrimitiveType][requireNonNull type](value, "[v.name] value")[else]value[/if]);
  [thisReturn type]
}

/**
 * Sets or replaces all mappings from the specified map as entries for the [sourceDocRef type v] map. Nulls are not permitted
 * @param entries The entries that will be added to the [v.name] map
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.set]([if v.multimapType][guava].collect.Multimap[else]java.util.Map[/if]<[gE], ? extends [wV]> entries) {
  [v.name].clear();
  return [v.names.putAll](entries);
}

/**
 * Put all mappings from the specified map as entries to the [sourceDocRef type v] map. Nulls are not permitted
 * @param entries to be added to [v.name] map
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.putAll]([if v.multimapType][guava].collect.Multimap[else]java.util.Map[/if]<[gE], ? extends [wV]> entries) {
  for (java.util.Map.Entry<[gE], ? extends [wV]> entry : entries.[if v.multimapType]entries[else]entrySet[/if]()) {
    [v.name].put(
        [requireNonNull type](entry.getKey(), "[v.name] key"),
        [requireNonNull type](entry.getValue(), "[v.name] value"));
  }
  [thisReturn type]
}
  [/for]
[else if v.arrayType]

/**
 * Assigns a value to the [sourceDocRef type v] attribute.
[if v.generateDefault]
 * <p><em>If not set, this attribute will have a default value as defined by [sourceDocRef type v].</em>
[/if]
 * @param elements The elements for [v.name]
 * @return {@code this} for use in a chained invocation
 */
[varargsSafety v]
[deprecation v]
public [thisReturnType type] [v.names.set]([v.elementType]... elements) {
  this.[v.name] = [if v.nullable]elements == null ? null : [/if]elements.clone();
  [mandatorySetter v]
  [thisReturn type]
}
[else]

/**
 * Assigns a value to the [sourceDocRef type v] attribute.
[if v.generateDefault]
 * <p><em>If not set, this attribute will have a default value returned by the initializer of [sourceDocRef type v].</em>
[/if]
 * @param [v.name] The value for [v.name] [if v.nullable](can be {@code null})[/if]
 * @return {@code this} for use in a chained invocation
 */
[deprecation v]
public [thisReturnType type] [v.names.set]([v.atNullability][v.type] [v.name]) {
  [if v.primitive or v.nullable]
  this.[v.name] = [v.name];
  [else]
  this.[v.name] = [requireNonNull type]([v.name], "[v.name]");
  [/if]
  [nondefaultSetter v]
  [mandatorySetter v]
  [thisReturn type]
}
[/if]
[/for]
[/for]
[/template]

[template constructorAcceptType Attribute a][output.trim]
[if a.typeKind.isMultimapKind]
  [guava].collect.Multimap<[a.consumedElementType], ? extends [a.secondaryElementType]>
[else if a.typeKind.isMapKind]
  java.util.Map<[a.consumedElementType], ? extends [a.secondaryElementType]>
[else if a.typeKind.isCollectionKind]
  Iterable<[a.consumedElementType]>
[else]
  [a.type]
[/if]
[/output.trim][/template]

[template defineField Attribute v]
  [if v.containerType and (not v.guavaImmutableDeclared)]
    [if v.generateEnumMap]
private final java.util.EnumMap<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name] = new java.util.EnumMap<[v.wrappedElementType], [v.wrappedSecondaryElementType]>([v.wrappedElementType].class);
    [else if v.generateSortedMap]
private final java.util.TreeMap<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name] = new java.util.TreeMap<[v.wrappedElementType], [v.wrappedSecondaryElementType]>([if v.hasReverseOrder]java.util.Collections.<[v.wrappedElementType]>reverseOrder()[/if]);
    [else if v.typeKind.biMap]
private final [guava].collect.HashBiMap<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name] = [guava].collect.HashBiMap.create();
    [else if v.typeKind.setMultimap]
private final [guava].collect.HashMultimap<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name] = [guava].collect.HashMultimap.create();
    [else if v.typeKind.multimapKind]
private final [guava].collect.ArrayListMultimap<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name] = [guava].collect.ArrayListMultimap.create();
    [else if v.mapType]
private final java.util.Map<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name] = new java.util.LinkedHashMap<[v.wrappedElementType], [v.wrappedSecondaryElementType]>();
    [else if v.typeKind.multiset]
private final [guava].collect.HashMultiset<[v.elementType]> [v.name] = [guava].collect.HashMultiset.create();
    [else if v.generateSortedSet]
private final java.util.TreeSet<[v.wrappedElementType]> [v.name] = new java.util.TreeSet<[v.wrappedElementType]>([if v.hasReverseOrder]java.util.Collections.<[v.wrappedElementType]>reverseOrder()[/if]);
    [else if v.generateEnumSet]
private final java.util.EnumSet<[v.elementType]> [v.name] = java.util.EnumSet.noneOf([v.elementType].class);
    [else if v.setType]
private final java.util.LinkedHashSet<[v.elementType]> [v.name] = new java.util.LinkedHashSet<[v.elementType]>();
    [else if v.listType]
private final java.util.ArrayList<[v.elementType]> [v.name] = new java.util.ArrayList<[v.elementType]>();
    [else if v.optionalType]
private [v.type] [v.name] = [optionalEmpty v];
    [else]
[output.error]no field generation code for attribute of type [v.type][/output.error]
    [/if]
  [else if v.primitive]
private [v.type] [v.name];
  [else]
private [v.atNullability][v.type] [v.name];
  [/if]
[/template]

[template clearField Attribute v]
  [if v.optionalType]
[v.name] = [optionalEmpty v];
  [else if v.containerType and (not v.guavaImmutableDeclared)]
[v.name].clear();
  [else if v.boolean]
[v.name] = false;
  [else if v.primitive]
[v.name] = 0;
  [else]
[v.name] = null;
  [/if]
[/template]

[template buildFromAttribute Attribute v]
  [if v.collectionType]
[v.names.addAll](instance.[v.names.get]());
  [else if v.mapType]
[v.names.putAll](instance.[v.names.get]());
  [else if v.optionalType]
[v.type] [v.name]Optional = instance.[v.names.get]();
if ([v.name]Optional.[optionalPresent v]) {
  [v.names.set]([v.name]Optional);
}
  [else if v.nullable]
[v.atNullabilityLocal][v.type] [v.name]Value = instance.[v.names.get]();
if ([v.name]Value != null) {
  [v.names.set]([v.name]Value);
}
  [else]
[v.names.set](instance.[v.names.get]());
  [/if]
[/template]

[template generateEqualsHashCode Type type]
[let equalToType][type.names.typeModifiable][/let]
[for getters = type.equivalenceAttributes]

/**
 * This instance is equal to all instances of {@code [equalToType]} that have equal attribute values.
[if type.mandatoryAttributes]
 * An uninitialized instance is equal only to itself.
[/if]
 * @return {@code true} if {@code this} is equal to {@code another} instance
 */
@Override
public boolean equals([atNullable]Object another) {
  if (this == another) return true;
  if (!(another instanceof [equalToType])) return false;
  [equalToType] o = ([equalToType]) another;
  [if type.mandatoryAttributes]
  if (![isInitialized type]() || !o.[isInitialized type]()) {
    return false;
  }
  [/if]
  return equalTo(o);
}

private boolean equalTo([equalToType] another) {
  [if type.equalToDefined]
  return super.equals(another);
  [else]
[for v in getters]
  [if v.generateDerived]
  [v.type] [v.name] = [invokeSuper v].[v.names.get]();
  [else if v.generateDefault]
  [v.type] [v.name] = [isSet v]()
      ? this.[v.name]
      : [invokeSuper v].[v.names.get]();
  [/if]
[/for]
  return [if not getters]true[/if][for v in getters][if not for.first]
      && [/if][im.equalsAttribute v (type.annotationType or (v.generateDerived or v.generateDefault))][/for];
  [/if]
}
[let computeHashCodeBody]
[let h][disambiguateField type 'h'][/let]
[if type.annotationType]
  int [h] = 0;
[for v in getters if not v.generateDerived]
[if v.arrayType]
  [h] += 127 * "[v.name]".hashCode() ^ java.util.Arrays.hashCode([v.name]);
[else if v.primitive]
  [h] += 127 * "[v.name]".hashCode() ^ [im.primitiveHashCode v];
[else]
  [h] += 127 * "[v.name]".hashCode() ^ [v.name].hashCode();
[/if]
[/for]
  return [h];
[else if getters.isEmpty]
  return [type.hashCode];
[else]
  int [h] = 31;
[for v in getters]
  [if v.generateDerived]
  [v.type] [v.name] = [invokeSuper v].[v.names.get]();
  [else if v.generateDefault]
  [v.type] [v.name] = [isSet v]()
      ? this.[v.name]
      : [invokeSuper v].[v.names.get]();
  [/if]
[if v.arrayType]
  [h] = [h] * 17 + java.util.Arrays.hashCode([v.name]);
[else if v.nullable]
  [h] = [h] * 17 + [if type.generateJdkOnly][im.objectsUtilRef type]hashCode[else][guava].base.Objects.hashCode[/if]([v.name]);
[else if v.primitive]
  [h] = [h] * 17 + [im.primitiveHashCode v];
[else]
  [h] = [h] * 17 + [v.name].hashCode();
[/if]
[/for]
  return [h];
[/if]
[/let]
[if type.hashCodeDefined]

public final int hashCode() {
  if (![isInitialized type]()) return [type.hashCode];
  return super.hashCode();
}
[else]

/**
[if not getters]
 * Returns a constant hash code value.
[else]
 * Computes a hash code from attributes: [for a in getters][if not for.first], [/if]{@code [a.name]}[/for].
[/if]
 * @return hashCode value
 */
@Override
public int hashCode() {
[computeHashCodeBody]
}
[/if]
[/for]
[/template]

[template generateToString Type type]
[if not type.toStringDefined]

/**
 * Generates a string represetion of this {@code [type.typeAbstract.simple]}.
 * If uninitialized, some attribute values may appear as question marks.
 * @return A string representation
 */
@Override
public String toString() {
[if not type.equivalenceAttributes]
  return "[type.names.typeModifiable]{}"
[else if type.generateJdkOnly]
  return "[type.names.typeModifiable]{"
  [for v in type.equivalenceAttributes]
    [if v.containerType]
      + "[if not for.first], [/if][v.name]=" + [v.name]
    [else if v.arrayType]
      + "[if not for.first], [/if][v.name]=" + ([if v.nullable][v.name] != null[else][isSet v]()[/if] ? java.util.Arrays.toString([v.name]) : "?")
    [else if v.nullable]
      + "[if not for.first], [/if][v.name]=" + [v.name]
    [else if not v.generateDerived]
      + "[if not for.first], [/if][v.name]="  + ([isSet v]() ? [v.name] : "?")
    [/if]
  [/for]
      + "}";
[else]
  return [type.typeMoreObjects].toStringHelper("[type.names.typeModifiable]")
[for v in type.equivalenceAttributes]
  [if v.containerType]
      .add("[v.name]", [v.name])
  [else if v.arrayType]
      .add("[v.name]", [if v.nullable][v.name] != null[else][isSet v]()[/if] ? java.util.Arrays.toString([v.name]) : "?")
  [else if v.nullable]
      .add("[v.name]", [v.name])
  [else if not v.generateDerived]
      .add("[v.name]", [isSet v]() ? [v.name] : "?")
  [/if]
[/for]
      .toString();
[/if]
}
[/if]
[/template]

[template annotationsWhenTopLevel Type type Boolean is]
[if is]
[if type.generateSuppressAllWarnings]@SuppressWarnings("all")[/if]
[if classpath.available 'javax.annotation.ParametersAreNonnullByDefault']
@javax.annotation.ParametersAreNonnullByDefault
[/if]
[if classpath.available 'javax.annotation.Generated']
@javax.annotation.Generated({"Modifiables.generator", "[type.typeAbstract.relative]"})
[/if]
[/if]
[if classpath.available 'javax.annotation.concurrent.NotThreadSafe']
@javax.annotation.concurrent.NotThreadSafe
[/if]
[for a in type.passedAnnotations]
[a]
[/for]
[/template]

[template packageWhenTopLevel Type type Boolean is]
[if is]
[type.sourceHeader]
  [if type.package]
package [type.package];
  [/if]

import java.lang.String;
  [for starImport in type.requiredSourceStarImports]
import [starImport];
  [/for]
[/if]
[/template]

[template isInitialized Type t][disambiguateAccessor t t.names.isInitialized][/template]

[template isSet Attribute a][disambiguateAccessor a.containingType a.names.isSet][/template]

[template requireNonNull Type type][if type.generateJdkOnly][im.objectsUtilRef type]requireNonNull[else][guava].base.Preconditions.checkNotNull[/if][/template]

[template thisReturn Type type]return this;[/template]

[template thisReturnType Type type][type.names.typeModifiable][/template]

[template invokeSuper Attribute a][for di = a.defaultInterface][if di][di].[/if][/for]super[/template]

[template sourceDocRef Type t Attribute a][if t.kind.isValue]{@link [t.typeAbstract.relative]#[a.names.get]() [a.names.raw]}[else]{@code [a.names.raw]}[/if][/template]

[template optionalGet Attribute a][if a.jdkSpecializedOptional]getAs[toUpper a.elementType][else]get[/if]()[/template]

[template optionalEmpty Attribute a][a.rawType].[if a.jdkOptional]empty[else if a.fugueOptional]none[else]absent[/if]()[/template]

[template optionalOf Attribute a][a.rawType].[if not a.optionalAcceptNullable][if a.fugueOptional]some[else]of[/if][else if a.jdkOptional]ofNullable[else if a.fugueOptional]option[else]fromNullable[/if][/template]

[template optionalPresent Attribute a][if a.fugueOptional]isDefined[else]isPresent[/if]()[/template]

[template atNullableAccept Attribute a][if a.optionalType and a.optionalAcceptNullable][atNullable][/if][/template]

[template atNullable][if classpath.available 'javax.annotation.Nullable']@javax.annotation.Nullable [/if][/template]

[template disambiguateField Type type String name][name][for v in type.implementedAttributes if v.name eq name]$$[/for][/template]

[template disambiguateAccessor Type type String name][name][for v in type.implementedAttributes if v.names.get eq name]$$[/for][/template]

[template deprecation Attribute a][if a.deprecated]@Deprecated[/if][/template]

[template varargsSafety Attribute a][if a.nonRawElemementType]@SafeVarargs[/if][/template]
