<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>immutables</artifactId>
    <groupId>org.immutables</groupId>
    <version>2.1.9-SNAPSHOT</version>
  </parent>
  <artifactId>ordinal</artifactId>
  <name>${project.groupId}.${project.artifactId}</name>
  <description>
    API and support runtime classes for implementing immutable objects as
    set enum-like object values, accumulated in so called "domains". This
    allows for special performance optiomization, like using bit-sets to
    efficiently calculate inclusion in set or set differences.
  </description>
  <dependencies>
    <dependency>
      <!-- Guava is required dependency if using ordinal module -->
      <groupId>org.immutables.dependency</groupId>
      <artifactId>utility</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
    </dependency>
    <dependency>
      <groupId>org.immutables</groupId>
      <artifactId>testing</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- it's better have just 'value' dep, but due to some maven 3.3.1 bug,
    it exposes both relocated and not relocated classess, having processor to run twice -->
    <dependency>
      <groupId>org.immutables</groupId>
      <artifactId>value</artifactId>
      <version>${project.version}</version>
      <classifier>annotations</classifier>
      <scope>test</scope>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.immutables</groupId>
      <artifactId>value-processor</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
